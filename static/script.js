// search variables
var newSearch = {
  radius: 0,
  lat: 0,
  long: 0,
  price: '',
  limit: 0,
  categories: ''
};

// variable to hold coordinates
var coordinates;

// variable to hold marker for person
var personMarker;

// Map to hold map generated by GoogleMaps in order to add rest. markers after pick
var googleMap;

// google maps radius circle object
var radiusCircle;

// infowindow to show results
var infowindow

// Results from Yelp Search
var YelpList = [];
var businessList = [];
var pickMarker;

function getCoordinates() {
  return new Promise((resolve, reject) => {
    navigator.geolocation.getCurrentPosition(function (position) {
      resolve(position);
      reject();
    }, () => {
      // show popup
    }, { enableHighAccuracy: true });
  });
}

async function getRestaurants(obj) {
  var response = await fetch('/api/yelpCall', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(obj)
  })
  return await response.json()
}

function initMap() {
  getCoordinates().then(position => {
    coordinates = position;
    // setting newSearch variable's lat & long values to co
    newSearch.lat = coordinates.coords.latitude;
    newSearch.long = coordinates.coords.longitude;

    // map options
    const mapOptions = {
      zoom: 15,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };

    // generating map
    const map = new google.maps.Map(document.getElementById('googleMap'), mapOptions);
    googleMap = map;

    // geolocate position
    const positionForMarker = new google.maps.LatLng(coordinates.coords.latitude, coordinates.coords.longitude);

    // marker based off geolocate position
    const marker = new google.maps.Marker({
      map: map,
      position: positionForMarker,

    });

    // setting personMarker to google maps marker for current location
    personMarker = marker;

    map.setCenter(positionForMarker);

    // create radius around person
    const circle = new google.maps.Circle({
      map: map,
      // radius: searchRadiusInMiles * 1609.34,
      radius: 1609.34,
      fillColor: '#AA0000'
    });
    circle.bindTo('center', marker, 'position');
    radiusCircle = circle;
    map.fitBounds(circle.getBounds());
  })
    .catch(
      console.log('error!')
    );
}

// function redrawCircle(circleObj, newRadius, mapsObj) {
function redrawCircle(newRadius) {
  var radiusInMeters = parseInt(newRadius) * 1609.34;
  radiusCircle.setRadius(radiusInMeters);
  googleMap.fitBounds(radiusCircle.getBounds());
}

function search() {
  var prices = [];
  var checksDiv = document.getElementById('checkboxes')
  var checks = checksDiv.getElementsByTagName('INPUT');
  for (let i = 0; i < checks.length; i++) {
    if (checks[i].checked) {
      prices.push(checks[i].value)
    }
  }
  newSearch.categories = formCategories.data;
  newSearch.limit = formLimit.data;
  newSearch.price = prices.join(',');

  // resetting below variables
  if (pickMarker) {
    pickMarker.setMap(null);
  }
  if (infowindow) {
    infowindow.close()
  }
  if (YelpList) {
    YelpList = [];
  }
  if (businessList) {
    businessList = [];
  }

  // to convert to meters
  newSearch.radius = Math.floor(parseInt(formRadius.data) * 1609.34);

  // // set max meters radius to 40,000
  // if (newSearch.radius > 40000) {
  //   newSearch.radius = 40000;
  // };

  // calls Yelp API with newSearch object
  getRestaurants(newSearch)
    .then(response => {
      // push each rest. from response into YelpList array
      for (let i = 0; i < response.jsonBody.businesses.length; i++) {
        YelpList.push(response.jsonBody.businesses[i]);
      }

      // shuffle list of rests.
      YelpList = shuffle(YelpList);

      // array to hold all markers for yelp listings
      let businessMarkers = [];

      // loop through results from API call, create a google maps marker, then push into businessMarkers array          
      for (let i = 0; i < YelpList.length; i++) {
        const LatLng = { lat: YelpList[i].coordinates.latitude, lng: YelpList[i].coordinates.longitude };

        const restMarker = new google.maps.Marker({
          map: googleMap,
          position: LatLng,
          icon: '/yelp_icon.png',
          animation: google.maps.Animation.BOUNCE
        });

        businessMarkers.push(restMarker);
      }
      // setting selected result. (always last in the array)
      // b/c array is shuffled prior to pick, this pick will always be randomized
      pickMarker = businessMarkers[businessMarkers.length - 1];
      var pickYelpResult = YelpList[YelpList.length - 1];
      infowindow = new google.maps.InfoWindow({
        content: infowindowContent(pickYelpResult.url, pickYelpResult.image_url, pickYelpResult.name, pickYelpResult.rating, pickYelpResult.location.address1, pickYelpResult.location.address2, pickYelpResult.location.city, pickYelpResult.location.state, pickYelpResult.location.zip_code),
        maxWidth: 500
      })
      // looping through businessMarkers, removing each one every .5 seconds after 3 second delay
      for (let j = 0; j < businessMarkers.length; j++) {
        // removes marker for everything before last business marker
        if (j < businessMarkers.length - 1) {
          setTimeout(() => {
            businessMarkers[j].setMap(null);
            YelpList.splice(YelpList[j], 1);
          }, 3000 + (j * 500));
        } else {
          // sets animation to null for last rest.
          setTimeout(() => {
            infowindow.open(googleMap, pickMarker)
            pickMarker.setAnimation(null)
          }, 3000 + ((j - 1) * 500));
        }
      }
    })

    // errors
    .catch(err => {
      console.log(err);
    })
};

// to format infowindow content
function infowindowContent(url, picture, name, rating, address1, address2, city, state, zipcode) {
  url = url ? url : 'yelp.com';
  address2 = address2 ? address2 : '';
  return '<div id="infowindow">' +
    '<a href="' + url + '">'
      + '<img id="infowindowImage" src="' + picture + '"></a>'
        + '<div><p>' + name + '</p>'
        + '<p> rating: ' + rating + '</p>'
        + '<p>' + address1 + '</p>'
        + '<p>' + address2 + '</p>'
        + '<p>' + city + ', ' + state + ' ' + zipcode + '</p>'
        + '</div></div>'
}

// shuffle function
function shuffle(arr) {
  let m = arr.length, t, i;
  while (m) {
    i = Math.floor(Math.random() * m--);
    t = arr[m];
    arr[m] = arr[i];
    arr[i] = t;
  }
  return arr;
}