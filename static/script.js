var newSearch = {
  radius: 0,
  lat: 0,
  long: 0,
  categories: '',
  limit: 20,
  price: '',
};
// variable for radius to search in MILES
// yelp && google maps takes it in meters only
var searchRadiusInMiles = 1;

// used for switch case for swapping MatCards
var searched = false;
var coordinates;

// variable to hold marker for person
var personMarker;

// Map to hold map generated by GoogleMaps in order to add rest. markers after pick
var googleMap;

// google maps radius circle object
var radiusCircle;

// Results from Yelp Search
var YelpList = [];
var businessList = [];
var pick;

function getCoordinates() {
  return new Promise((resolve, reject) => {
    navigator.geolocation.getCurrentPosition(function (position) {
      resolve(position);
      reject();
    }, () => {
      // show popup
    }, { enableHighAccuracy: true });
  });
}

function initMap() {
  getCoordinates().then( position => {
    coordinates = position;
    // setting newSearch variable's lat & long values to co
    newSearch.lat = coordinates.coords.latitude;
    newSearch.long = coordinates.coords.longitude;

    // map options
    const mapOptions = {
      zoom: 15,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };

    // generating map
    const map = new google.maps.Map(document.getElementById('googleMap'), mapOptions);
    googleMap = map;

    // geolocate position
    const positionForMarker = new google.maps.LatLng(coordinates.coords.latitude, coordinates.coords.longitude);

    // marker based off geolocate position
    const marker = new google.maps.Marker({
      map: map,
      position: positionForMarker
    });

    // setting personMarker to google maps marker for current location
    personMarker = marker;

    map.setCenter(positionForMarker);

    // create radius around person
    const circle = new google.maps.Circle({
      map: map,
      radius: searchRadiusInMiles * 1609.34,
      fillColor: '#AA0000'
    });
    circle.bindTo('center', marker, 'position');
    radiusCircle = circle;
    map.fitBounds(circle.getBounds());
  })
    .catch();
}

function search() {
  // resetting switch case variable to display search MatCard
  searched = true;

  // resetting below variables
  if (pick) {
    pick.setMap(null);
  }
  if (YelpList) {
    YelpList = [];
  }
  if (businessList) {
    businessList = [];
  }

  // to convert to meters
  newSearch.radius = Math.floor(searchRadiusInMiles * 1609.34);

  // set max meters radius to 40,000
  if (newSearch.radius > 40000) {
    newSearch.radius = 40000;
  };

  // adding price search options to newSearch.price string
  if (price1 === true) {
    newSearch.price += '1';
  };
  if (price2 === true && newSearch.price == '') {
    newSearch.price += '2';
  } else if (price2 === true) {
    newSearch.price += ',2';
  };
  if (price3 === true && newSearch.price == '') {
    newSearch.price += '3';
  } else if (price3 === true) {
    newSearch.price += ',3';
  };
  if (price4 === true && newSearch.price == '') {
    newSearch.price += '4';
  } else if (price4 === true) {
    newSearch.price += ',4';
  };

  // calls Yelp API with newSearch object
  _yelpService.getRestaurants(newSearch)
    .then(response => {
      // push each rest. from response into YelpList array
      for (let i = 0; i < response.jsonBody.businesses.length; i++) {
        YelpList.push(response.jsonBody.businesses[i]);
      }

      // shuffle list of rests.
      YelpList = shuffle(YelpList);

      // array to hold all markers for yelp listings
      let businessMarkers = [];

      // for loop to loop through rests from API call, create a google maps marker, then push into businessMarkers array          
      for (let i = 0; i < YelpList.length; i++) {
        const LatLng = { lat: YelpList[i].coordinates.latitude, lng: YelpList[i].coordinates.longitude };

        const restMarker = new google.maps.Marker({
          map: googleMap,
          position: LatLng,
          icon: '../assets/static/images/yelpIcon.png',
          animation: google.maps.Animation.BOUNCE
        });

        businessMarkers.push(restMarker);
      }

      // setting selected rest. (always last in the array)
      // b/c array is shuffled prior to pick, this pick will always be randomized
      pick = businessMarkers[businessMarkers.length - 1];

      // looping through businessMarkers, removing each one every .5 seconds after 3 second delay
      for (let j = 0; j < businessMarkers.length; j++) {
        // removes marker for everything before last business marker
        if (j < businessMarkers.length - 1) {
          setTimeout(() => {
            businessMarkers[j].setMap(null);
            YelpList.splice(YelpList[j], 1);
          }, 3000 + (j * 500));
        } else {
          // sets animation to null for last rest.
          setTimeout(() => {
            pick.setAnimation(null)
          }, 3000 + ((j - 1) * 500));
        }
      }

      // shuffle function
      // function scoped to getRestaurants method
      function shuffle(arr) {
        let m = arr.length, t, i;
        while (m) {
          i = Math.floor(Math.random() * m--);
          t = arr[m];
          arr[m] = arr[i];
          arr[i] = t;
        }
        return arr;
      }
    })

    // errors
    .catch(err => {
      console.log(err);
    })
};

function pick_again() {
  // resetting variables
  searched = false;
  newSearch.radius = 0;
  newSearch.categories = '';
  newSearch.limit = 20;
  newSearch.price = '';
}
